{"version":3,"sources":["components/Gameboard.js","components/Game.js","components/App.js","index.js"],"names":["Gameboard","forwardRef","props","ref","status","stopTimer","updateScore","initialContent","className","emptyCards","i","boardSize","push","id","name","flip","lock","useState","boardContent","setboardContent","boardSizeClass","setBoardSizeClass","cards","setCards","tempRecord","setTempRecord","updateFlip","num","tempCards","length","tempCard","generateBoard","checkScore","gameRecords","slice","prevNum","currentNum","console","log","cardLock","onClickCard","tempRecordNum","counter","checkGame","resetBoard","generateCard","newCard","flipClass","lockClass","onClick","newCards","clearCards","cardsClass","n","selected","cardsPicked","sort","Math","random","x","getRandomCards","newboard","useEffect","useImperativeHandle","renderBoard","Game","setStatus","buttonText","setButtonText","score","setScore","gameTimer","setGameTimer","timer","useRef","childRef","congrates","clearInterval","current","alert","barWidth","round","barStyle","width","barTime","setInterval","startTimer","type","style","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ce3f3e2.chunk.js","sourcesContent":["import React, {forwardRef, useEffect, useState,useImperativeHandle} from \"react\";\n\nconst  Gameboard =forwardRef((props, ref) =>{\n    const {status,stopTimer,updateScore} = props;\n\n    const initialContent = (\n        <div className=\"game-instruction\">\n            <h3 className=\"game-instruction__header\">Instruction</h3>\n            <p className=\"game-instruction__content\">\n            - Click on the card to view the back face of the card. <br />\n            - Get two exact same card to score.<br />- Score are based on the time\n            and level. <br />- You only have 60s for each level. <br />- There are\n            three levels, '2x2', '4x4' and '6x6'. <br />- Press 'Start Game'\n            button when you are ready.\n            </p>\n        </div>\n    );\n    \n    const boardSize = 2;\n    \n    let emptyCards = [];\n    for(let i =0; i<boardSize*boardSize; i++){\n        emptyCards.push({\n            id:i,\n            name:\"\",\n            flip:false,\n            lock:false\n        });\n    }\n\n    const[boardContent, setboardContent] = useState(initialContent);\n    const[boardSizeClass, setBoardSizeClass] = useState(\"\");\n    const[cards, setCards] = useState(emptyCards);\n    const [tempRecord, setTempRecord] = useState([]);\n\n    function checkGame (){\n        let counter = 1;\n        console.log(cards);\n        for(let i=0; i< cards.length; i++){\n            if (cards[i].flip){\n                counter+=1;\n            }\n        }\n        // console.log(\"counter\"+counter);\n        if(counter === cards.length){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    // update flip status and display on the board\n    function updateFlip(num){\n        let tempCards = [ ...cards ];\n        if(num.length >1){\n            for(let i=0; i< num.length; i++){\n                let tempCard = { ...tempCards[num[i]] };\n                tempCard.flip = !cards[num[i]].flip;\n                tempCards[num[i]].flip = tempCard.flip;\n            }\n        }else{\n            let tempCard = { ...tempCards[num] };\n            tempCard.flip = !cards[num].flip;\n            tempCards[num].flip = tempCard.flip;\n        }\n        \n        setCards( tempCards );\n        setboardContent(generateBoard(cards) );\n    }\n\n    // lock cards\n    function cardLock(num){\n        let tempCards = [ ...cards ];\n        for(let i=0; i< 2; i++){\n            let tempCard = { ...tempCards[num[i]] };\n            tempCard.lock = true;\n            tempCards[num[i]].lock = tempCard.lock;\n        }\n        setCards( tempCards );\n        setboardContent(generateBoard(cards) );\n    }\n\n    // check if score can be updated if two cards are flip to true \n    function checkScore(){\n        const gameRecords = tempRecord.slice(-2);\n        const prevNum = gameRecords[0];\n        const currentNum = gameRecords[1];\n        console.log(\"check score\");\n\n        console.log(cards);\n        if(cards[prevNum].id !== cards[currentNum].id){\n            if(cards[prevNum].name === cards[currentNum].name ){\n                cardLock([prevNum,currentNum]);\n                setTempRecord([]);\n                console.log(\"clear record\");\n                console.log(tempRecord);\n                updateScore();\n                // lock card flip\n            }else{\n                updateFlip([prevNum,currentNum]);\n            }\n        }\n    }\n\n    // trigger when a card is clicked\n    const onClickCard=(num)=>{\n        // if card not locked\n        if(!cards[num].lock){\n            // flip card and change card status\n            updateFlip(num);\n            // if flip is effective\n            if( cards[num].flip ){\n                console.log(\"flip\"+num);\n                // update flip record list \n                let tempRecordNum = tempRecord;\n                tempRecordNum.push(num);\n                setTempRecord(tempRecordNum);\n                // update score\n                console.log(\"add record\");\n                console.log(tempRecordNum);\n                if(tempRecord.length>1){\n                    checkScore();\n                }\n\n                const result = checkGame();\n                if(result){\n                    // go back to stop game\n                    stopTimer();\n                    setTempRecord([]);\n                    console.log(cards);\n                    resetBoard(boardSize);\n                }\n            }\n        }\n        \n    }\n\n    // generate random cards list based on board size\n    function getRandomCards(n){\n        let selected =[];\n        let cardsPicked =[];\n        const cards = ['html5','css3','js','sass','nodejs','react','linkedin','heroku','github','aws'];\n        let shuffled = cards.sort(function(){return .5 - Math.random()});\n        selected = shuffled.slice(0,n);\n        for(var x= 0; x< selected.length; x++){\n            for (var i = 0; i < 2; i++) {\n                cardsPicked.push(selected[x]);\n            }\n        }\n        cardsPicked = cardsPicked.sort(function(){return .5 - Math.random()});\n        \n        return cardsPicked;\n    }\n\n    // single card content \n    const generateCard=(newCard,num)=>{\n        const flipClass = newCard.flip ? \"card--flipped\":\"\";  \n        const lockClass =  newCard.lock ? \"card--locked\":\"\"\n        return(\n            <div className={`card ${newCard.name} ${flipClass} ${lockClass}`} onClick={()=>{onClickCard(num)}} key={num}>\n                <div className=\"card__face card__face--front\"></div>\n                <div className=\"card__face card__face--back\"></div>\n            </div>\n        )\n    }\n\n    // generate cards on board\n    function generateBoard(newCards){\n        let cards = [];\n        for(let i=0; i< newCards.length; i++ ){\n            cards.push(generateCard(newCards[i],i))\n        }\n        return cards;\n    }\n    \n    // create new cards\n    function clearCards(){\n        const cardsClass = getRandomCards(boardSize);\n        let tempCards = emptyCards;\n        let newCards = [];\n        for(let i =0; i<boardSize*boardSize; i++){\n            let tempCard = { ...tempCards[i] };\n            tempCard.name = cardsClass[i];\n            newCards.push(tempCard)\n        }\n        setCards(newCards);\n        console.log(\"reset cards\");\n    }\n\n    // reset cards status only before new game start\n    useEffect(()=>{\n        if(!status){\n            clearCards();\n        }\n    },[status])\n\n    // reset game board \n    function resetBoard(boardSize){\n        setBoardSizeClass(\"game-board-\"+boardSize+\"-row\");\n        console.log(cards);\n        const newboard = generateBoard(cards);\n        setboardContent(newboard);\n    }\n\n    // click button to trigger game content rerender on board\n    useImperativeHandle(\n        ref,\n        ()=>({\n            renderBoard(){\n                if(!status){\n                    resetBoard(boardSize);\n                }\n            }\n        })\n    )\n\n    return <div className={`game-board ${boardSizeClass}`}>{boardContent}</div>;\n})\n\nexport default Gameboard;","import { useEffect, useState ,useRef} from \"react\";\nimport Gameboard from './Gameboard';\n\nconst Game = () => {\n    \n    const [status, setStatus] = useState(false);\n    const [buttonText, setButtonText]=useState(\"New Game\");\n    const [score, setScore] = useState(0);\n    const[gameTimer, setGameTimer]= useState(60);\n    const timer = useRef(null);\n    const childRef = useRef();\n    const congrates = \"Congratulations, your score is \"+ score;\n\n    function buttonClick (){\n        console.log(\"click: \"+status);\n        childRef.current.renderBoard();\n        if(!status){\n            startTimer();\n            setButtonText(\"End Game\");\n        }else{\n            stopTimer();\n        }\n        setStatus(!status);\n    }\n\n    function startTimer (){\n        console.log(\"Timer start\");\n        let barTime = 60;\n        timer.current = setInterval(()=>{\n            \n            barTime -= 1;\n            if(barTime <= 0){\n                stopTimer();\n            }else{\n                setGameTimer(barTime);\n            }            \n        \n        }, 1000);\n    }\n\n    function stopTimer() {\n        console.log(\"Game over\");\n        clearInterval(timer.current);\n        setStatus(false);\n        alert(congrates);\n        setButtonText(\"Start Game\");\n    }\n\n    function resetGame(){\n        // console.log(\"Timer reset\");\n        setGameTimer(60);\n        setScore(0);\n    }\n    useEffect(resetGame,[status]);\n\n    const barWidth = Math.round(gameTimer/60*10000)/100+\"%\"\n    const barStyle = {\n        width: `${barWidth}`\n    };\n\n    function updateScore(){\n        setScore(score=>score+=56);\n    }\n\n    return(\n        <div>\n        <div className=\"game-stats\">\n            <div className=\"game-stats__level\">\n            <div className=\"game-stats__level--label\">Current Level:</div>\n            <div className=\"game-stats__level--value\">1</div>\n            </div>\n            <div className=\"game-stats__score\">\n            <div className=\"game-stats__score--label\">Score:</div>\n            <div className=\"game-stats__score--value\">{score}</div>\n            </div>\n            <button onClick={buttonClick} className=\"game-stats__button\" \n            type=\"button\">\n                {buttonText}\n            </button>\n        </div>\n        <div className=\"game-timer\">\n            <div className=\"game-timer__bar\" style={barStyle}>{gameTimer}s</div>\n        </div>\n        <Gameboard status={status} ref={childRef} stopTimer={stopTimer} updateScore={updateScore}/>\n        </div>  \n        \n    )\n}\n\nexport default Game;","import Game from './Game';\nimport '../css/style.css';\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"game-title\">The Classic MeMmmm Game</h1>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}